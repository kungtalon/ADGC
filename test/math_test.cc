#include <iostream>

#include "gtest/gtest.h"

#include "utils/math_utils.h"

TEST(AdgcMathUtilsTest, DoubleGemmEasyTest) {
  // shape_a : [2,2]
  double a[4] = {10, 13, 18, 13};
  // shape_b: [3, 5, 2]
  double b[4] = {8, 6, 3, 7};
  double true_c[4] = {119, 151, 183, 199};

  double *out_c = new double[4];
  memset(out_c, 0, 4 * sizeof(double));
  utils::math::tensor_gemm(4, 4, 4, 2, 2, 2, a, b, out_c);

  for (int ix = 0; ix < 4; ix++) {
    ASSERT_FLOAT_EQ(true_c[ix], out_c[ix])
        << "Mismatched results at index " << ix << "Extra info:\n"
        << utils::array_to_str(2, 2, true_c, "true")
        << utils::array_to_str(2, 2, out_c, "out");
  }

  delete[] out_c;
}

TEST(AdgcMathUtilsTest, DoubleGemmTest) {
  // shape_a : [3, 4, 5]
  double a[60] = {9,  13, 16, 11, 14, 4,  17, 18, 5,  4,  5,  12, 8,  2,  5,
                  15, 10, 9,  5,  4,  12, 6,  15, 5,  9,  17, 8,  2,  17, 17,
                  12, 18, 13, 4,  19, 2,  7,  4,  16, 19, 9,  19, 2,  15, 6,
                  15, 13, 11, 13, 14, 5,  13, 2,  6,  11, 13, 6,  16, 6,  11};
  // shape_b: [3, 5, 2]
  double b[30] = {7,  14, 6, 8,  16, 12, 19, 10, 19, 8,  13, 3, 19, 7, 5,
                  10, 18, 6, 13, 5,  9,  16, 16, 6,  19, 7,  6, 5,  4, 19};
  double true_c[24] = {872, 644, 589, 490, 368, 322, 480, 480,
                       552, 303, 910, 314, 882, 411, 714, 286,
                       537, 461, 686, 726, 371, 411, 597, 595};

  double *out_c = new double[24];
  utils::math::tensor_gemm(60, 30, 24, 4, 2, 5, a, b, out_c);

  for (int ix = 0; ix < 24; ix++) {
    ASSERT_FLOAT_EQ(true_c[ix], out_c[ix])
        << "Mismatched results at index " << ix << "Extra info:\n"
        << utils::array_to_str(3, 6, true_c, "true")
        << utils::array_to_str(3, 6, out_c, "out");
  }

  delete[] out_c;
}

TEST(AdgcMathUtilsTest, FloatGemmTest) {
  // shape_a : [3, 5, 4, 2]
  float a[120] = {
      16.88492332,  12.47520438,  -15.03205052, -17.93040784, 17.5013207,
      1.23883813,   -19.60257236, 5.21262429,   21.53421057,  3.86285431,
      -5.44299216,  -3.65959169,  -2.35757604,  -31.53677993, -5.02177946,
      14.95206873,  9.14344491,   10.4136446,   26.95772764,  -22.35772924,
      -27.90444228, -6.42308393,  21.16721422,  -27.14618305, 3.01442654,
      0.64875702,   -22.03852835, -2.23979662,  43.71722864,  29.90602173,
      15.43549136,  -36.61033954, -3.79812259,  14.18052876,  -0.91218018,
      20.83904448,  34.96532405,  -14.86200763, 14.62392484,  -6.95162896,
      20.394961,    17.01772267,  -3.27810098,  6.64762352,   29.83543667,
      2.00749956,   -16.80955507, 7.53420382,   -41.66824548, 17.11153736,
      11.43654875,  -48.59661045, -1.4787123,   -4.81088221,  -11.26309483,
      -11.77233465, -16.53992119, 3.18951809,   -31.40045744, 5.51761145,
      -13.61604232, -4.00419741,  -33.87231538, 6.40277308,   -9.15619465,
      -8.74100795,  -12.4875724,  34.01386909,  -17.81823058, -6.3681442,
      17.26204234,  26.74405783,  15.14493639,  15.42207885,  4.0759059,
      -10.28235984, 23.53662431,  -31.99490774, -24.56362964, 27.95092826,
      19.59029532,  -10.20030364, -4.07836018,  21.12503834,  -7.64753809,
      4.94900031,   -19.05277198, -24.89816312, -11.80817398, 29.05627338,
      -13.76871606, 10.59707549,  34.04416302,  -26.78704329, 16.06107284,
      -8.90201652,  19.21353041,  -25.55453555, 5.03285704,   12.92012398,
      10.82919257,  -20.60138795, -2.11474265,  -31.85816367, 3.74826154,
      -17.45750633, 39.93866324,  2.0753909,    -12.91321782, -30.20386269,
      48.58622609,  -21.9981656,  -6.27709218,  -3.8688761,   14.31237627,
      1.18801837,   11.55363094,  19.14103447,  27.80594535,  6.75309145};
  // shape_b: [3, 5, 2, 3]
  float b[90] = {
      -24.08891768, 19.10916398,  -10.69358215, -14.70072914, 1.42217809,
      -21.15327119, -2.35114457,  -13.60625645, -4.54010322,  6.03159566,
      36.09380435,  9.26130794,   6.56171509,   12.06918793,  1.91301812,
      12.49039976,  -6.81139432,  -0.51846326,  7.4718695,    3.11032941,
      -5.04383969,  4.08371205,   1.62898795,   -12.71762182, 12.31039292,
      14.81173308,  5.09379581,   -16.27400764, 19.57111411,  -9.38191282,
      -15.72126483, 4.36260076,   25.56263674,  -6.33773906,  6.16308386,
      -13.99013319, -22.02384896, 34.08425105,  -8.46993572,  -16.64756363,
      -9.39645726,  -6.97169667,  -28.57313071, 50.54393291,  16.99465967,
      -17.78647421, 7.13576582,   0.48779708,   45.65050343,  -34.0186771,
      3.00557638,   30.86247819,  -15.8565686,  6.99322348,   10.43321978,
      -20.83246583, -4.89185658,  -1.17386402,  16.55119,     -14.51533865,
      30.03572633,  3.28760964,   47.70036172,  -8.524765,    16.85427169,
      11.21777871,  -43.94204018, 9.95870643,   11.69534035,  -13.81896703,
      -40.86366305, 21.76963167,  -22.21099586, 5.41285729,   12.96057319,
      6.05033482,   -3.42768929,  -11.83506695, -7.58802859,  3.29943638,
      -30.35722599, -19.75961808, 0.80920611,   -24.08825113, 20.85159088,
      -31.31361059, 31.77987082,  9.33677161,   10.02070423,  14.99733908};
  // shape_c : [3, 5, 4, 3]
  float true_c[180] = {
      -590.13412838,  340.39873085,   -444.45169603,  625.69589638,
      -312.75015145,  540.03324658,   -439.79969731,  336.19745554,
      -213.35728956,  395.57537422,   -367.17548975,  99.35766282,
      -27.33086693,   -153.57488377,  -61.99245536,   -9.27591588,
      -58.02983915,   -9.18085932,    -184.67410281,  -1106.20458049,
      -281.36819168,  101.99176233,   608.00466253,   161.27510985,
      190.06726439,   39.42251527,    12.09248365,    -102.36804775,
      477.64519114,   63.16228251,    -263.32788591,  -293.03380067,
      -50.05157061,   -200.1734493,   440.37444349,   54.56756279,
      25.17273857,    10.43267687,    -23.45493065,   -173.81569234,
      -72.19568452,   139.6436904,    448.77700879,   184.69153074,
      -600.83616748,  -34.17410766,   -11.62833914,   387.74230901,
      -277.53041494,  221.27196863,   -152.38734552,  -350.36406556,
      394.33234809,   -200.1565581,   672.30130346,   227.03099967,
      317.54028098,   293.1571237,    80.55454768,    139.71086392,
      -428.48846877,  193.85672428,   283.26877274,   9.40499037,
      26.66881541,    -176.79804284,  -481.77380951,  142.53248676,
      734.58724336,   216.51764904,   -26.89944773,   -535.10106474,
      632.82973802,   -1581.0187693,  233.6309126,    557.13834226,
      846.44217157,   241.93399468,   112.65640407,   -5.19555218,
      46.06460963,    444.03738944,   -273.27591236,  177.47083548,
      415.86704894,   -813.23301291,  -279.53449409,  799.07052123,
      -1547.73023122, -530.94861312,  460.27351115,   -716.78134479,
      -233.3532412,   853.95533662,   -1666.35134672, -572.52521822,
      -687.75406214,  450.08402123,   -88.64746441,   479.68832601,
      -114.53255509,  200.33423529,   -1009.94790775, 707.129548,
      -98.08790861,   1613.40882457,  -1011.30083207, 238.90956002,
      139.90702649,   -60.25261268,   -297.94355389,  54.59491429,
      -255.09646167,  129.31318818,   283.12044538,   -1019.87971861,
      349.27913054,   -289.08833573,  974.34209943,   -285.55543614,
      675.36394044,   -107.51344512,  820.039424,     -302.58249768,
      342.6390793,    42.43674961,    -271.88842571,  58.26967598,
      -309.27354257,  -360.01285557,  -482.27848248,  -1188.12619963,
      117.34757163,   -1304.93990308, 494.44375564,   458.58483763,
      -570.15392348,  69.66460977,    -1125.80071151, 1433.65253643,
      -184.98599257,  -582.73963513,  523.71651297,   -5.95390763,
      -581.36514078,  191.59310588,   551.45800615,   -33.6136909,
      -17.04403368,   -87.68182025,   -365.17244617,  129.2320307,
      384.1713484,    -145.78201688,  97.75308625,    349.635223,
      316.51174197,   -1.7595703,     306.73397378,   -344.06464986,
      133.45449739,   -1262.41956283, 694.80265734,   -67.04749086,
      1119.56770112,  66.0016782,     142.50611184,   -945.04570823,
      -167.01017059,  157.78955718,   -257.50802536,  309.5280707,
      -436.26739647,  472.66258332,   419.62705264,   -169.97925506,
      654.23748298,   642.85026891,   -803.03381258,  984.94775345};

  float *out_c = new float[180];
  utils::math::tensor_gemm(120, 90, 180, 4, 3, 2, a, b, out_c);

  for (int ix = 0; ix < 180; ix++) {
    ASSERT_FLOAT_EQ(true_c[ix], out_c[ix])
        << "Mismatched results at index " << ix << "Extra info:\n"
        << utils::array_to_str(15, 12, true_c, "true") << std::endl
        << utils::array_to_str(15, 12, out_c, "out") << std::endl;
  }

  delete[] out_c;
}

TEST(AdgcMathUtilsTest, FloatElementAddTest) {
  float a[3] = {1, 2, 3};
  float b[3] = {6, 7, 2};
  float *c = new float[3];
  memset(c, 0, sizeof(float) * 3);

  utils::math::elementwise_add(3, a, b, c);
  float expect[3] = {7, 9, 5};

  for (int ix = 0; ix < 3; ++ix) {
    EXPECT_FLOAT_EQ(expect[ix], c[ix]);
  }

  delete c;
}

TEST(AdgcMathUtilsTest, FloatElementSubTest) {
  float a[3] = {1, 2, 3};
  float b[3] = {6, 8, 2};
  float *c = new float[3];
  memset(c, 0, sizeof(float) * 3);

  utils::math::elementwise_add(3, a, b, c, true);
  float expect[3] = {-5, -6, 1};

  for (int ix = 0; ix < 3; ++ix) {
    EXPECT_FLOAT_EQ(expect[ix], c[ix]);
  }

  delete c;
}

TEST(AdgcMathUtilsTest, FloatElementMultplyTest) {
  float a[3] = {1, 2, 3};
  float b[3] = {6, 4, -2};
  float *c = new float[3];
  memset(c, 0, sizeof(float) * 3);

  utils::math::elementwise_multiply(3, a, b, c);
  float expect[3] = {6, 8, -6};

  for (int ix = 0; ix < 3; ++ix) {
    EXPECT_FLOAT_EQ(expect[ix], c[ix]);
  }

  delete c;
}

TEST(AdgcMathUtilsTest, DoubleElementMultplyTest) {
  double a[5] = {0.5651718, 0.67220126, 0.92264734, 0.53891886, 0.39417962};
  double b[5] = {0.06695532, 0.66330092, 0.86758923, 0.90448946, 0.13699479};
  double *c = new double[5];
  memset(c, 0, sizeof(float) * 5);

  utils::math::elementwise_multiply(5, a, b, c);
  float expect[5] = {0.03784126, 0.44587171, 0.8004789, 0.48744643, 0.05400055};

  for (int ix = 0; ix < 5; ++ix) {
    EXPECT_FLOAT_EQ(expect[ix], c[ix]);
  }

  delete c;
}

TEST(AdgcMathUtilsTest, DoubleFillDiagonalTest) {
  double diags[3] = {1, 2, 3};
  /*
        [1, 0, 0, 0]
        [0, 2, 0, 0]
        [0, 0, 3, 0]
  */
  double *zeros = new double[12];
  memset(zeros, 0, sizeof(double) * 12);
  utils::math::fill_diagonal(3, 4, diags, zeros);

  double expected[12] = {1., 0., 0, 0, 0, 2, 0, 0, 0, 0, 3, 0};
  for (int ix = 0; ix < 12; ++ix) {
    EXPECT_FLOAT_EQ(expected[ix], zeros[ix]);
  }

  delete zeros;
}

TEST(AdgcMathUtilsTest, Kronecker1DTest) {
  double a[3] = {1., 2., 3.};
  double b[4] = {3, 4, 5, 6};

  double *zeros = new double[13];
  memset(zeros, 0, sizeof(double) * 13);
  utils::math::kron1d(3, 4, 12, a, b, zeros);

  double expected[12] = {3, 4, 5, 6, 6, 8, 10, 12, 9, 12, 15, 18};
  for (int ix = 0; ix < 12; ++ix) {
    EXPECT_FLOAT_EQ(expected[ix], zeros[ix]);
  }

  delete zeros;
}

TEST(AdgcMathUtilsTest, Kronecker2DTest) {
  double a[6] = {1., 2., 3., 4., 5., 6.};
  double b[6] = {-1, -2, -3, -4, -5., -6};

  double *zeros = new double[37];
  memset(zeros, 0, sizeof(double) * 37);
  utils::math::tensor_kron_product(6, 6, 3, 2, 2, 3, a, b, zeros);

  double expected[36] = {-1.,  -2.,  -3.,  -2.,  -4.,  -6.,  -4.,  -5.,  -6.,
                         -8.,  -10., -12., -3.,  -6.,  -9.,  -4.,  -8.,  -12.,
                         -12., -15., -18., -16., -20., -24., -5.,  -10., -15.,
                         -6.,  -12., -18., -20., -25., -30., -24., -30., -36.};
  for (int ix = 0; ix < 36; ++ix) {
    EXPECT_FLOAT_EQ(expected[ix], zeros[ix]);
  }

  delete zeros;
}

TEST(AdgcMathUtilsTest, SigmoidTest) {
  double a[6] = {1., 2., 3., 4., 5., 6.};

  double *b = new double[6];
  memset(b, 0, sizeof(double) * 6);
  for (int ix = 0; ix < 6; ++ix) {
    b[ix] = utils::math::sigmoid(a[ix]);
  }

  double expected[6] = {0.7310585975646973, 0.8807970285415649,
                        0.9525741338729858, 0.9820137619972229,
                        0.9933071732521057, 0.9975274205207825};
  for (int ix = 0; ix < 6; ++ix) {
    EXPECT_FLOAT_EQ(expected[ix], b[ix]);
  }

  delete b;
}

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}